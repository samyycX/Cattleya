# Generated by Django 4.2.13 on 2024-07-21 16:49

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=15, verbose_name='昵称')),
                ('phone', models.CharField(max_length=30, verbose_name='手机号')),
                ('registered_time', models.DateTimeField(auto_now=True, verbose_name='注册时间')),
            ],
            options={
                'verbose_name': '用户附加个人资料',
            },
        ),
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(blank=True, null=True, upload_to='cattleya/avatar', verbose_name='头像文件')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='re_avatar_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户头像',
            },
        ),
        migrations.CreateModel(
            name='ActivityPost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('content', models.TextField(verbose_name='内容')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='发布时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='re_activity_author', to=settings.AUTH_USER_MODEL, verbose_name='发布作者')),
                ('likes', models.ManyToManyField(default=[], related_name='re_activity_likes', to=settings.AUTH_USER_MODEL, verbose_name='点赞')),
            ],
            options={
                'verbose_name': '动态帖子',
            },
        ),
        migrations.CreateModel(
            name='ActivityComment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('content', models.TextField(max_length=200, verbose_name='评论内容')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='发布时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='re_activity_comment_author', to=settings.AUTH_USER_MODEL, verbose_name='评论发布者')),
                ('father_comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='re_activity_comment', to='api.activitycomment', verbose_name='父评论')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='re_activity_comment_activity', to='api.activitypost', verbose_name='所属的帖子')),
            ],
            options={
                'verbose_name': '动态的评论',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='re_user_avatar', to='api.avatar'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
